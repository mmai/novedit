#!/usr/bin/env ruby
#
# Novedit
#

#Dirty hack for a testing parameter
$TEST = $*.include?('--test')

#For testing current code when a previous version has been installed
$:.unshift('.')

begin
  require 'rubygems'
rescue LoadError
  $stderr.puts "RubyGems is not found."
end

#XXX To comment in production
#require "ruby-debug"

require "novedit"

require 'gettext'
include GetText
bindtextdomain("novedit", File.join($INSTALL_PATH, "locale"))
bindtextdomain("noveditGlade", File.join($INSTALL_PATH, "locale"))

# UTF-8
$KCODE = "U"


$TITLE = $NAME
$DEFAULT_NODE_NAME = _("New node")

$PROGNAME = File.basename(__FILE__) # Used by the recent files filter
$DIR_MODULES =  $INSTALL_PATH + "/modules/"
$HELP_FILE =  $INSTALL_PATH + "/doc/documentation_fr.nov"
home = ENV["HOME"] || ENV["HOMEPATH"] || File::expand_path("~")
$HOMEDIR = File.join(home, '.novedit')

#Create homedir if needed
Dir.mkdir($HOMEDIR) unless File.directory?($HOMEDIR)

if $TEST
  $DIR_PLUGINS =  File.join($INSTALL_PATH, "plugins")
  $DIR_THEMES =  File.join($INSTALL_PATH, "themes")
else
  $DIR_PLUGINS =  File.join($HOMEDIR, "plugins")
  if not File.directory?($DIR_PLUGINS)
    #Create plugins directory and copy default plugins
    FileUtils.cp_r(File.join($INSTALL_PATH, 'plugins'),$HOMEDIR)
  end

  $DIR_THEMES =  File.join($HOMEDIR, "themes")
  if not File.directory?($DIR_THEMES)
    #Create themes directory and copy default themes
    FileUtils.cp_r(File.join($INSTALL_PATH, 'themes'),$HOMEDIR)
  end
end

$SETTINGS_FILE = File.join($HOMEDIR, '.novedit_settings.yaml')

require  "novedit/controlerNovedit"
require  "novedit/modelNovedit"
begin
  Gtk.init
rescue
  $stderr.puts "GTK is required"
end

model = NoveditModel.new(nil)
ControlerNovedit.new(model, $*[0])

#Guard for tests (cf. http://danlucraft.com/blog/2009/03/testing-ruby-gnome2-with-cucumber/ )
unless $running_features
  Gtk.main
end

